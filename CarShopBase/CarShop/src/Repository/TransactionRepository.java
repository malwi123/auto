package Repository;

import java.sql.Connection;
import java.sql.SQLException;

import domain.Transaction;
import domain.IHaveId;
import mapers.ResultSetMapper;

public class TransactionRepository  extends RepositoryBase{

	Connection connection;
	
	private String createTableSql;
	
	private String insertSql;
	private String updateSql;
	private String deleteSql;
	private String selectAllSql;
	public TransactionRepository(Connection connection, ResultSetMapper mapper) throws SQLException{
		super(connection, mapper);

	}
	
	protected void Init()
	{
		createTableSql = "CREATE TABLE transactions("
				+ "id INT GENERATED BY DEFAULT AS IDENTITY,"
				+ "carId INT,"
				+ "customerId INT,"
				+ "phone INT,"
				+ ")";

		insertSql = "INSERT INTO transactions(carId,customerId) VALUES (?,?)";
		updateSql = "UPDATE transactions SET (carId,customerId) = (?,?) WHERE id=?";
		deleteSql = "DELETE FROM transactions WHERE id=?";
		selectAllSql = "SELECT * FROM transactions";
	}
	
	protected void setupInsert(IHaveId transaction) throws SQLException {
		insert.setInt(1, ((Transaction) transaction).getCarId());
		insert.setInt(2, ((Transaction) transaction).getCustomerId());
	}
	
	protected void setupUpdate(IHaveId transaction) throws SQLException {
		update.setInt(1, ((Transaction) transaction).getCarId());
		update.setInt(2, ((Transaction) transaction).getCustomerId());
		update.setInt(3, ((Transaction) transaction).getId());
	}
	
	
	@Override
	protected String selectAllSql() {
		return selectAllSql;
	}
	
	@Override
	protected String deleteSql() {
		return deleteSql;
	}
	
	@Override
	protected String updateSql() {
		return updateSql;
	}
	
	@Override
	protected String insertSql() {
		return insertSql;
	}
	
	protected String tableName() {
		return "transactions";
	}
	
	@Override
	protected String createTableSql() {
		return createTableSql;
	}
}
